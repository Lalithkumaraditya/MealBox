{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - Data/Profession/Projects/React/Maxmillion/React/Meal-Box/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from './cart-context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {}\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Volumes/Macintosh HD - Data/Profession/Projects/React/Maxmillion/React/Meal-Box/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","id","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACvB,UAAMC,YAAY,GAACH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAAnB;AACA,UAAMC,kBAAkB,GAACN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA7E;AACA,UAAMC,qBAAqB,GAACT,KAAK,CAACH,KAAN,CAAYa,SAAZ,CAAsBL,IAAI,IAAEA,IAAI,CAACM,EAAL,KAAUV,MAAM,CAACI,IAAP,CAAYM,EAAlD,CAA5B;AACA,WAAM;AACJd,MAAAA,KAAK,EAACM,YADF;AAEJL,MAAAA,WAAW,EAACQ;AAFR,KAAN;AAIH;;AACD,MAAIL,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B,CAE7B;;AAED,SAAON,gBAAP;AACH,CAfD;;AAgBA,MAAMgB,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCpB,UAAU,CAACI,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMoB,oBAAoB,GAAGX,IAAI,IAAI;AACjCU,IAAAA,kBAAkB,CAAC;AACfb,MAAAA,IAAI,EAAE,KADS;AAEfG,MAAAA,IAAI,EAAEA;AAFS,KAAD,CAAlB;AAIH,GALD;;AAMA,QAAMY,yBAAyB,GAAGN,EAAE,IAAI;AACpCI,IAAAA,kBAAkB,CAAC;AACfb,MAAAA,IAAI,EAAE,QADS;AAEfS,MAAAA,EAAE,EAAEA;AAFW,KAAD,CAAlB;AAIH,GALD;;AAMA,QAAMO,WAAW,GAAG;AAChBrB,IAAAA,KAAK,EAAEiB,SAAS,CAACjB,KADD;AAEhBC,IAAAA,WAAW,EAAEgB,SAAS,CAAChB,WAFP;AAGhBqB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACFL,KAAK,CAACQ;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAxBD;;GAAMT,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import CartContext from './cart-context';\nimport { useReducer } from 'react';\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n}\nconst cartReducer = (state, action) => {\n    if (action.type === 'ADD') {\n        const updatedItems=state.items.concat(action.item);\n        const updatedTotalAmount=state.totalAmount + action.item.price * action.item.amount;\n        const existingCartItemIndex=state.items.findIndex(item=>item.id===action.item.id);\n        return{\n          items:updatedItems,\n          totalAmount:updatedTotalAmount\n        };\n    }\n    if (action.type === 'REMOVE') {\n       \n    }\n\n    return defaultCartState\n}\nconst CartProvider = props => {\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n    const addItemToCartHandler = item => {\n        dispatchCartAction({\n            type: 'ADD',\n            item: item\n        });\n    };\n    const removeItemFromCartHandler = id => {\n        dispatchCartAction({\n            type: 'REMOVE',\n            id: id\n        })\n    };\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    };\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n};\n\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}